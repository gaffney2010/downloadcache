// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/downloadcache.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DownloadCache_Get_FullMethodName = "/downloadcache.DownloadCache/Get"
)

// DownloadCacheClient is the client API for DownloadCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadCacheClient interface {
	// Fetches a URL, using a cache if available.
	Get(ctx context.Context, in *DownloadCacheRequest, opts ...grpc.CallOption) (*DownloadCacheResponse, error)
}

type downloadCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadCacheClient(cc grpc.ClientConnInterface) DownloadCacheClient {
	return &downloadCacheClient{cc}
}

func (c *downloadCacheClient) Get(ctx context.Context, in *DownloadCacheRequest, opts ...grpc.CallOption) (*DownloadCacheResponse, error) {
	out := new(DownloadCacheResponse)
	err := c.cc.Invoke(ctx, DownloadCache_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadCacheServer is the server API for DownloadCache service.
// All implementations must embed UnimplementedDownloadCacheServer
// for forward compatibility
type DownloadCacheServer interface {
	// Fetches a URL, using a cache if available.
	Get(context.Context, *DownloadCacheRequest) (*DownloadCacheResponse, error)
	mustEmbedUnimplementedDownloadCacheServer()
}

// UnimplementedDownloadCacheServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadCacheServer struct {
}

func (UnimplementedDownloadCacheServer) Get(context.Context, *DownloadCacheRequest) (*DownloadCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDownloadCacheServer) mustEmbedUnimplementedDownloadCacheServer() {}

// UnsafeDownloadCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadCacheServer will
// result in compilation errors.
type UnsafeDownloadCacheServer interface {
	mustEmbedUnimplementedDownloadCacheServer()
}

func RegisterDownloadCacheServer(s grpc.ServiceRegistrar, srv DownloadCacheServer) {
	s.RegisterService(&DownloadCache_ServiceDesc, srv)
}

func _DownloadCache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadCacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadCache_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadCacheServer).Get(ctx, req.(*DownloadCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadCache_ServiceDesc is the grpc.ServiceDesc for DownloadCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "downloadcache.DownloadCache",
	HandlerType: (*DownloadCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DownloadCache_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/downloadcache.proto",
}
